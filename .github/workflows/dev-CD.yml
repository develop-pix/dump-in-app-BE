name: CD

on:
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  # django-test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.11.5]

  #   steps:

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install Poetry
  #     run: |
  #       curl -sSL https://install.python-poetry.org | python -

  #   - name: Install Dependencies
  #     run: |
  #       poetry install

  #   - name: Run isort
  #     run: poetry run isort .

  #   - name: Run black
  #     run: poetry run black .

  #   - name: Run flake8
  #     run: poetry run flake8

  #   - name: Type check
  #     run: |
  #       poetry run mypy --config mypy.ini dump_in/

  #   - name: Run tests
  #     run: |
  #       poetry run pytest --cov=dump_in tests/ &&
  #       poetry run pytest --cov=dump_in --cov-fail-under=80 tests/

  docker-dev-images-build:
    # needs: django-test
    runs-on: ubuntu-latest
    steps:

    - name: github checkout
      uses: actions/checkout@v2

    - name: aws configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: build docker file and setting deploy files
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dump-in-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/dev.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        sed -i "s%##IMAGE##%$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG%g" ./deploy/docker-compose.yml
        sed -i "s%##DJANGO_SETTINGS_MODULE##%config.django.dev%g" ./deploy/docker-compose.yml
        cat ./deploy/docker-compose.yml
        touch deploy/deploy.sh
        echo "#!/bin/bash" >> deploy/deploy.sh
        echo "docker compose -f .dev.docker-compose.yml up -d" >> deploy/deploy.sh

    - name: upload to s3
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        zip -r deploy-$IMAGE_TAG.zip ./deploy/
        aws s3 cp --region ap-northeast-2 --acl private ./deploy-$IMAGE_TAG.zip s3://dump-in-deploy/dev/

  # deploy-to-dev-ec2:
  #   needs: docker-dev-images-build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
  #         host: ${{ secrets.AWS_DEV_EC2_IP }}
  #         username: ${{ secrets.AWS_DEV_EC2_NAME }}
  #         port: ${{ secrets.AWS_DEV_EC2_PORT }}
  #         script: |
  #           pwd
