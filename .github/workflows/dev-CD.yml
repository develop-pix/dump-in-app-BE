name: CD

on:
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  django-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11.5]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -

    - name: Install Dependencies
      run: |
        poetry install

    - name: Run isort
      run: poetry run isort dump_in/

    - name: Run black
      run: poetry run black dump_in/

    - name: Run flake8
      run: poetry run flake8

    - name: Type check
      run: |
        poetry run mypy --config mypy.ini dump_in/

    - name: Run tests
      run: |
        poetry run pytest --cov=dump_in tests/ &&
        poetry run pytest --cov=dump_in --cov-fail-under=80 tests/

  docker-image-build-and-deploy:
    needs: django-test
    runs-on: ubuntu-latest
    steps:

    - name: github checkout
      uses: actions/checkout@v2

    - name: Create env file
      env:
        DJANGO_DEV_ENV: ${{ secrets.DJANGO_DEV_ENV }}
      run: |
        touch .env.django
        echo "$DJANGO_DEV_ENV" >> .env.django

    - name: AWS configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build docker file and push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dump-in-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/dev.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        sed -i "s%<IMAGE>%$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG%g" ./docker-compose.yml
        sed -i "s%<DJANGO_SETTINGS_MODULE>%config.django.dev%g" ./docker-compose.yml
        touch deploy.sh
        echo "#!/bin/bash" >> deploy.sh
        echo "aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY" >> deploy.sh
        echo "sudo docker compose -f /home/ubuntu/docker-compose.yml up -d" >> deploy.sh

    - name: Upload to S3
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        zip -r deploy-$IMAGE_TAG.zip appspec.yml deploy.sh docker-compose.yml ./nginx
        aws s3 cp --region ap-northeast-2 --acl private ./deploy-$IMAGE_TAG.zip s3://dump-in-deploy/dev/

    - name: Start Deploy
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws deploy create-deployment --application-name dump-in-dev-deploy \
        --deployment-config-name CodeDeployDefault.OneAtATime \
        --deployment-group-name deploy-group \
        --s3-location bucket=dump-in-deploy,bundleType=zip,key=dev/deploy-$IMAGE_TAG.zip

    - name: Notify Slack on Success
      if: success()
      id: slack-success
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
            "attachments": [
              {
                "color": "#36a64f",
                "title": "${{ github.repository }}",
                "title_link": "https://github.com/${{github.repository}}",
                "text": "GitHub Action ì„±ê³µ ðŸ˜„",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Tag",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Notify Slack on Failure
      if: failure()
      id: slack-failure
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
            "attachments": [
              {
                "color": "#ff0000",
                "title": "${{ github.repository }}",
                "title_link": "https://github.com/${{github.repository}}",
                "text": "GitHub Action ì‹¤íŒ¨ ðŸ˜­",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Tag",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
